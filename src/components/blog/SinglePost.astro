---
import { Icon } from 'astro-icon/components';

import Image from '~/components/common/Image.astro';
import PostTags from '~/components/blog/Tags.astro';
import SocialShare from '~/components/common/SocialShare.astro';

import { getPermalink } from '~/utils/permalinks';
import { getFormattedDate } from '~/utils/utils';
import { FaApple, FaSpotify } from 'react-icons/fa';
import type { Post } from '~/types';

export interface Props {
  post: Post;
  url: string | URL;
}

const { post, url } = Astro.props;

const isRemoteImage = typeof post.image === 'string' && post.image.startsWith('http');
const imageWidth = post.image?.width ?? 900;
const imageHeight = post.image?.height ?? 506;
---

<section class="py-8 sm:py-16 lg:py-20 mx-auto">
  <article>
    <header
      class={post.image
        ? 'intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'
        : 'intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'}
    >
      <div class="flex justify-between flex-col sm:flex-row max-w-3xl mx-auto mt-0 mb-2 px-4 sm:px-6 sm:items-center">
        <p>
          <Icon name="tabler:clock" class="w-4 h-4 inline-block -mt-0.5 dark:text-gray-400" />
          <time datetime={String(post.publishDate)} class="inline-block">{getFormattedDate(post.publishDate)}</time>
          {
            post.authors?.length && (
              <>
                {' '}
                ·{' '}
                <Icon
                  name={post.authors.length > 1 ? 'tabler:users' : 'tabler:user'}
                  class="w-4 h-4 inline-block -mt-0.5 dark:text-gray-400"
                />
                {post.authors.map((author, index) => (
                  <span class="inline-block">
                    {index > 0 && ', '}

                    {author.url ? (
                      <a href={author.url}>
                        <span class="hover:underline">{author.name}</span>
                      </a>
                    ) : (
                      <span class="hover:underline">{author.name}</span>
                    )}
                  </span>
                ))}
              </>
            )
          }

          {
            post.category && (
              <>
                {' '}
                ·{' '}
                <a class="hover:underline inline-block" href={getPermalink(post.category.slug, 'category')}>
                  {post.category.title}
                </a>
              </>
            )
          }
          {
            (post.listeningTime || post.readingTime) && (
              <>
                &nbsp;·
                <>
                  <Icon
                    name={post.listeningTime ? 'tabler:headphones' : 'tabler:book'}
                    class="w-3.5 h-3.5 inline-block -mt-0.5 dark:text-gray-400"
                  />
                  <span>
                    {post.listeningTime
                      ? (() => {
                          return post.listeningTime + ' listen';
                        })()
                      : `${post.readingTime} min read`}
                  </span>
                </>
              </>
            )
          }
        </p>
      </div>

      <h1
        class="px-4 sm:px-6 max-w-3xl mx-auto text-4xl md:text-5xl font-bold leading-tighter tracking-tighter font-heading"
      >
        {post.title}
      </h1>
      <p
        class="max-w-3xl mx-auto mt-4 mb-8 px-4 sm:px-6 text-xl md:text-2xl text-muted dark:text-slate-400 text-justify"
      >
        {post.excerpt}
      </p>

      {
        post.image ? (
          isRemoteImage ? (
            <img
              src={post.image}
              class="block max-w-[500px] w-full h-auto mx-auto mb-6 sm:rounded-md bg-gray-400 dark:bg-slate-700"
              alt={post?.excerpt || ''}
              width={imageWidth}
              height={imageHeight}
              loading="eager"
              decoding="async"
            />
          ) : (
            <Image
              src={post.image}
              class="block max-w-[900px] w-full h-auto mx-auto mb-6 sm:rounded-md bg-gray-400 dark:bg-slate-700"
              widths={[400, 600, 900]}
              sizes="(max-width: 900px) 100vw, 900px"
              alt={post?.excerpt || ''}
              width={imageWidth}
              height={imageHeight}
              loading="eager"
              decoding="async"
            />
          )
        ) : (
          <div class="max-w-3xl mx-auto px-4 sm:px-6">
            <div class="border-t dark:border-slate-700" />
          </div>
        )
      }
      {
        post.imageDescription && (
          <p class="max-w-3xl mx-auto px-4 sm:px-6 text-muted dark:text-slate-400 text-sm italic">
            {post.imageDescription}
          </p>
        )
      }
    </header>
    <div
      class="mx-auto px-6 sm:px-6 max-w-3xl prose prose-md lg:prose-xl dark:prose-invert dark:prose-headings:text-slate-300 prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-primary dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg mt-8 prose-headings:scroll-mt-[80px] prose-li:my-0"
    >
      {/* Instead of <slot />, render the content component and pass needed components */}
      {post.Content ? <post.Content components={{ FaApple, FaSpotify }} /> : <slot />}
    </div>
    <div class="mx-auto px-6 sm:px-6 max-w-3xl mt-8 flex justify-between flex-col sm:flex-row">
      <PostTags tags={post.tags} class="mr-5 rtl:mr-0 rtl:ml-5" />
      <SocialShare url={url} text={post.title} class="mt-5 sm:mt-1 align-middle text-gray-500 dark:text-slate-600" />
    </div>
  </article>
</section>
